package feedloggr2

import (
	"io/ioutil"
	"os"
	"testing"
)

// Easily generated by "go run cmd/main/main.go -example"
const exampleConfig string = `Verbose = true
Database = ".feedloggr2.db"
OutputPath = "./feeds"
DownloadTimeout = 60

[[Feeds]]
  Title = "Example"
  URL = "https://example.com/rss"
`

func TestNewConfig(t *testing.T) {
	// Not sure what good this is, but hey! At least I'll get reminded to
	// update the README with a new example or something I guess..
	// Hmm, now that I think about it; it will show any issues with the
	// upstream toml pkg.
	conf := NewConfig()
	if got := conf.String(); got != exampleConfig {
		t.Errorf("NewConfig().String() =\n%v\nwant\n\n%v", got, exampleConfig)
	}
}

func TestLoadConfig(t *testing.T) {
	// A whole lotta setup...
	tmp, err := ioutil.TempFile("", "testconfig")
	if err != nil {
		t.Fatalf("Failed to create tempfile: %s\n", err)
	}
	defer os.Remove(tmp.Name())
	_, err = tmp.WriteString(exampleConfig)
	if err != nil {
		t.Fatalf("Failed to write tempfile %s: %s\n", tmp.Name(), err)
	}
	err = tmp.Close()
	if err != nil {
		t.Fatalf("Failed to close tempfile %s: %s\n", tmp.Name(), err)
	}

	// Do the ACTUAL tests now
	conf, err := LoadConfig(tmp.Name())
	if err != nil {
		t.Fatalf("Failed to load config from tempfile: %s\n", err)
	}

	if got := conf.String(); got != exampleConfig {
		t.Errorf("LoadConfig(...).String() =\n%v\nwant\n\n%v", got, exampleConfig)
	}
}
